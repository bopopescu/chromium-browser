# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
import sys
Import('env')

#
# Build the x86 specific library.
#
if not env.Bit('target_x86'): Return()

# Make a copy of debug CRT for now.
# TODO(bradnelson): there should be a better way to generalize this requirement.
# NOTE: debug builds on windows break without this
crt = []
if env.AllBits('windows', 'debug'):
  for i in ['.', '$STAGING_DIR']:
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/Debug_NonRedist/'
                         'x86/Microsoft.VC80.DebugCRT')
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/x86/Microsoft.VC80.CRT')

# Create environment for building the common library for x86 validators.
lib_env = env.Clone();
lib_env.Append(CPPPATH=['${TARGET_ROOT}'])
lib_env.FilterOut(CCFLAGS=['-Wextra', '-Wswitch-enum', '-Wsign-compare'])

lib_env.ComponentLibrary(lib_env.NaClTargetArchSuffix('ncval_base'), [
    'error_reporter.c',
    'halt_trim.c',
    'nacl_cpuid.c',
    'nacl_xgetbv.S',
    'ncinstbuffer.c',
    'x86_insts.c',
    'nc_segment.c',
    ])

lib_env.ComponentLibrary(lib_env.NaClTargetArchSuffix('ncval_base_verbose'), [
    'error_reporter_verbose.c',
    'x86_insts_verbose.c',
    ])

# Create environment for command-line tools and testing, rather than
# part of the TCB. Then define compile-time flag that communicates
# that we are compiling in the test environment (rather than for the TCB).
test_env = lib_env.Clone();
test_env.Append(CCFLAGS=['-DNACL_TRUSTED_BUT_NOT_TCB'])

nacl_cpuid = test_env.ComponentProgram(
    'nacl_cpuid',
    ['nacl_cpuid_test.c'],
    EXTRA_LIBS=[test_env.NaClTargetArchSuffix('ncval_base')])

test_env.Requires(nacl_cpuid, crt)
node = test_env.CommandTest(
    'nacl_cpuid_test.out',
    [nacl_cpuid])
test_env.AddNodeToTestSuite(node, ['large_tests'])

#---------- UNIT TESTS ---------------------------------

# Create an environment to run unit tests using Gtest.
gtest_env = env.MakeGTestEnv()

# List of (unit) test file prefixes to run unit tests on.
gtest_sources = [
    'halt_trim',
    'nc_remaining_memory',
    'nc_inst_bytes',
    ]

for source in gtest_sources:
  test_exe = gtest_env.ComponentProgram(
    'x86_validator_tests_' + source,
    [source+'_tests.cc'],
    EXTRA_LIBS=[gtest_env.NaClTargetArchSuffix('ncvalidate')])
  test_node = gtest_env.CommandTest(
      source+'Tests.out',
      command=[test_exe])
  gtest_env.AddNodeToTestSuite(test_node, ['small_tests'],
                               'run_x86_validator_tests')
