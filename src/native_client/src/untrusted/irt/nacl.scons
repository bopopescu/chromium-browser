# -*- python -*-
# Copyright (c) 2012 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


Import('env')

# This module shouldn't be built in an environment that uses glibc.
if env.Bit('nacl_glibc'):
  raise UserError('src/untrusted/irt/nacl.scons in the wrong environment?')

blob_env = env.Clone()
blob_env.Append(LINKFLAGS='-Wl,--section-start,.rodata=${IRT_BLOB_DATA_START}')
# The PNaCl linker (gold) does not implement the "-Ttext-segment"
# option.  However, with the linker for x86, the "-Ttext" option does
# not affect the executable's base address.
if blob_env.Bit('bitcode'):
  blob_env.Append(LINKFLAGS='-Wl,-Ttext=${IRT_BLOB_CODE_START}')
else:
  blob_env.Append(LINKFLAGS='-Wl,-Ttext-segment=${IRT_BLOB_CODE_START}')

irt_support_sources = [
    'irt_malloc.c',
    'irt_private_pthread.c',
    'irt_private_tls.c',
    ]

irt_entry_obj = blob_env.ComponentObject('irt_entry.c')

# NACL_GC_WRAP_SYSCALL uses ({...}) syntax.
blob_env.FilterOut(CCFLAGS=['-pedantic'])

irt_common_interfaces = [
    'irt_basic.c',
    'irt_fdio.c',
    'irt_filename.c',
    'irt_memory.c',
    'irt_dyncode.c',
    'irt_thread.c',
    'irt_mutex.c',
    'irt_cond.c',
    'irt_sem.c',
    'irt_tls.c',
    'irt_blockhook.c',
    'irt_clock.c',
    'irt_dev_exception_handling.c',
    ]

# These are the objects and libraries that go into every IRT image.
irt_support_objs = [blob_env.ComponentObject(x) for x in
                    (irt_support_sources + irt_common_interfaces)]

# We also get nc_init_private.c, nc_thread.c and nc_tsd.c via
# #includes of .c files.
irt_support_objs += [
    blob_env.ComponentObject(module,
                             '${MAIN_DIR}/src/untrusted/pthread/%s.c' % module)
    for module in ['nc_mutex', 'nc_condvar', 'nc_token']
    ]

irt_support_objs += [
    blob_env.ComponentObject('sys_private',
                             '${MAIN_DIR}/src/untrusted/nacl/sys_private.c'),
    blob_env.ComponentObject(
        'dynamic_annotations.o',
        '${MAIN_DIR}/src/untrusted/valgrind/dynamic_annotations.c'),
    ]

if env.Bit('target_arm'):
  if env.Bit('bitcode'):
    blob_env.Append(LINKFLAGS='--pnacl-allow-native')
    native_env = blob_env.Clone()
    native_env.PNaClForceNative()
  else:
    native_env = blob_env
  read_tp_obj = native_env.ComponentObject('aeabi_read_tp.o', 'aeabi_read_tp.S')
  irt_support_objs.append(read_tp_obj)
  # Publish the object file for tests/irt_private_pthread to use.
  # Putting aeabi_read_tp.o into libirt_support_private is not
  # sufficient because of link ordering issues.
  env.Replicate('${STAGING_DIR}', read_tp_obj)

# Build a library so that irt_support_objs can be used in tests that
# cover IRT-internal code.
env.ComponentLibrary('libirt_support_private', irt_support_objs)

# These go into only one image or the other.
irt_nonbrowser = ['irt_interfaces.c',
                  'irt_core_resource.c',
                  ]

irt_browser = ['irt_interfaces_ppapi.c',
               'irt_entry_ppapi.c',
               'irt_ppapi.c',
               'irt_manifest.c',
               'irt_nameservice.c',
               'irt_random.c',
               ]

def LinkIrt(output, files, libs):
  return blob_env.ComponentProgram(output,
                                   [irt_entry_obj] + irt_support_objs + files,
                                   EXTRA_LIBS=libs)

irt_core_library = LinkIrt('irt_core', irt_nonbrowser, [])
irt_library = LinkIrt('irt', irt_browser, ['ppruntime',
                                           'srpc',
                                           'imc_syscalls',
                                           'platform',
                                           'gio',
                                           'm'])

env.SDKInstallBin('irt_core.nexe', irt_core_library)
env.SDKInstallBin('irt.nexe', irt_library)

# TODO(mcgrathr): these should be installed, but scons is a mystery
#env.AddHeaderToSdk(['irt.h'])
#env.AddHeaderToSdk(['irt_ppapi.h'])

# Make sure that the linked IRT nexe never uses TLS via the TLS ABI
# register (e.g., %gs on x86-32).  All IRT code must avoid direct use
# of the TLS ABI register, which is reserved for user TLS.  Instead,
# ensure all TLS accesses use a call to __nacl_read_tp (or __aeabi_read_tp
# for ARM), which the IRT code overrides to segregate IRT-private TLS
# from user TLS.
if ((env.Bit('build_arm') or env.Bit('build_x86_32'))
    # Do not try to run OBJDUMP if 'built_elsewhere', since that *might*
    # mean that a toolchain is not even present. E.g., the arm buildbots
    # do not have the pnacl toolchain, since that is built for x86 hosts.
    and not env.Bit('built_elsewhere')):
  check_tls_arch = '${TARGET_FULLARCH}'
  if env.Bit('build_arm'):
    if env.Bit('bitcode'):
      check_tls_arch = 'arm-pnacl'
    else:
      check_tls_arch = 'arm-gcc'
  node = env.CommandTest('irt_tls_test.out',
                         ['${PYTHON}', env.File('check_tls.py'),
                          check_tls_arch, '${OBJDUMP}', irt_library],
                         # don't run ${PYTHON} under the emulator.
                         direct_emulation=False,
                         # Holy cow it takes over 30 seconds to disassemble
                         # the ARM irt.nexe. Set test size to 'large'.
                         size='large')
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_irt_tls_test')
  node = env.CommandTest('irt_core_tls_test.out',
                         ['${PYTHON}', env.File('check_tls.py'),
                          check_tls_arch, '${OBJDUMP}', irt_core_library],
                         # don't run ${PYTHON} under the emulator.
                         direct_emulation=False)
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_irt_core_tls_test')
