# -*- python -*-
# Copyright (c) 2012 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# TODO(bradnelson): Enable for PNaCl (figure out a way to get full frames
# with PNaCl).
is_broken = (env.Bit('bitcode') or
             env.Bit('running_on_valgrind') or
             env.Bit('asan'))

# Keep frame pointers so we get a nice stack trace.
# Set -O0 as otherwise some of the layers in the test case get optimized away.
env.Append(CCFLAGS=['-O0', '-fno-omit-frame-pointer', '-g'])
env['COMPONENT_STATIC'] = not env.Bit('nacl_glibc')
env['ENV']['NACL_UNTRUSTED_EXCEPTION_HANDLING'] = '1'

untrusted_crash_dump_lib = env.ComponentLibrary(
    'untrusted_crash_dump_lib',
    'untrusted_crash_dump_lib.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'])

if env.Bit('tests_use_irt'):
  untrusted_crash_dump_test = env.ComponentProgram(
      'untrusted_crash_dump_test',
      'untrusted_crash_dump_test.c',
      EXTRA_LIBS=['untrusted_crash_dump_lib',
                  'untrusted_crash_dump',
                  '${PTHREAD_LIBS}', '${NONIRT_LIBS}'])

  dump_file = env.File('untrusted_crash_dump_test_core.json')
  run_test = env.CommandSelLdrTestNacl(
      'untrusted_crash_dump_test_run.out',
      untrusted_crash_dump_test,
      declares_exit_status=True,
      sel_ldr_flags=['-a', '-E', 'NACLCOREFILE=' + dump_file.abspath])
  env.AlwaysBuild(run_test)
  env.SideEffect(dump_file, run_test)
  node = env.Command('untrusted_crash_dump_test.out',
                     ['untrusted_crash_dump_test.py',
                      dump_file, untrusted_crash_dump_test],
                     '${PYTHON} ${SOURCES} - ${ADDR2LINE} '
                     '${LIB_DIR} ${NACL_SDK_LIB} ${TARGET_FULLARCH}')
  env.AddNodeToTestSuite(
      node, ['small_tests'],
      'run_untrusted_crash_dump_test', is_broken=is_broken)

# Similar stuff, but in the browser.
# Confusingly, chrome_browser_tests are in nacl_env rather than nacl_irt_env,
# so we check for the IRT being used, but (oddly) not the irt specific env
# (test_use_irt).
if not env.Bit('tests_use_irt'):
  untrusted_crash_dump_test = env.ComponentProgram(
      'inbrowser_untrusted_crash_dump_test',
      env.ComponentObject(
          'inbrowser_untrusted_crash_dump_test',
          'untrusted_crash_dump_test.c'),
     EXTRA_LIBS=['untrusted_crash_dump_lib',
                  'untrusted_crash_dump',
                  'platform', 'gio', 'imc', 'imc_syscalls',
                  '${PTHREAD_LIBS}', '${NON_PPAPI_BROWSER_LIBS}'])

  crash_dump = ('${TARGET_ROOT}/test_results/'
                'inbrowser_untrusted_crash_dump_test.stdout')
  run_test = env.PPAPIBrowserTester(
      'inbrowser_untrusted_crash_dump_test_run.out',
      url='untrusted_crash_dump.html',
      nmfs=['untrusted_crash_dump_test.nmf'],
      nacl_exe_stdout={
          'file': crash_dump,
      },
      files=[untrusted_crash_dump_test,
             env.File('untrusted_crash_dump.html')])
  env.AlwaysBuild(run_test)
  node = env.Command(
      'inbrowser_untrusted_crash_dump_test.out',
      ['untrusted_crash_dump_test.py',
       crash_dump, untrusted_crash_dump_test,
       '${STAGING_DIR}/untrusted_crash_dump_test.nmf'],
       '${PYTHON} ${SOURCES} ${ADDR2LINE} '
       '${LIB_DIR} ${NACL_SDK_LIB} ${TARGET_FULLARCH}')
  env.AddNodeToTestSuite(
      node, ['chrome_browser_tests'],
      'run_inbrowser_untrusted_crash_dump_test',
      is_broken=env.PPAPIBrowserTesterIsBroken() or
                # TODO(bradnelson): Once we have proper support for running
                # in Chrome, remove this limitation.
                env.Bit('disable_dynamic_plugin_loading') or
                is_broken)
