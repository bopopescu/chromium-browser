# -*- python -*-
# Copyright 2012 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

node = env.PyAutoTester('pyauto_sanity.out', env.File('sanity.py'))
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_sanity_test',
                       is_broken=env.PyAutoTesterIsBroken())

# PyAutoTester wrapper which works for tests with a simple
# (nexe, html, nmf) naming scheme.  Accepts additional base_files
# in case the test depends on other files.
def SimplePyAutoTester(env, target, test,
                       test_names, base_files, *args, **kwargs):
  files = base_files
  for name in test_names:
    files.extend([env.File('${STAGING_DIR}/%s${PROGSUFFIX}' %
                           env.ProgramNameForNmf(name)),
                  env.File('${STAGING_DIR}/%s.html' % name)])
  return env.PyAutoTester(target, test,
                          files=files, nmf_names=test_names,
                          *args, **kwargs)

core_tests = ['ppapi_example_events',
              'ppapi_geturl',
              'ppapi_example_2d',
              # Omitting the example_audio_test for now.
              # http://code.google.com/p/chromium/issues/detail?id=116169
              # http://code.google.com/p/nativeclient/issues/detail?id=2668
              # 'ppapi_example_audio',
# TODO(dspringer): Re-enable this once the 3D ABI has stabilized.  See
# http://code.google.com/p/nativeclient/issues/detail?id=2060
#               'ppapi_example_gles2',
              'ppapi_example_post_message',
              'ppapi_ppb_core',
              'ppapi_ppb_file_system',
              'ppapi_ppb_graphics2d',
              'ppapi_ppb_image_data',
              'ppapi_progress_events',
              'ppapi_test_example',
              ]

# Additional files needed by the above tests.
core_test_files = [env.File('${STAGING_DIR}/nacltest.js'),
                   env.File('${STAGING_DIR}/ppapi_geturl_success.html'),
                   env.File('${STAGING_DIR}/ppapi_ppb_file_system.js'),
                   env.File('${STAGING_DIR}/ppapi_progress_events.js'),
                   ]

# TODO(dspringer): Re-enable this once the 3D ABI has stabilized. See
# http://code.google.com/p/nativeclient/issues/detail?id=2060
# ppapi_gles_book_hello_triangle_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_hello_triangle'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_hello_triangle.nmf')]
# ppapi_gles_book_mip_map_2d_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_mip_map_2d'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_mip_map_2d.nmf')]
# ppapi_gles_book_simple_texture_2d_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_2d'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_2d.nmf')]
# ppapi_gles_book_simple_texture_cubemap_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_cubemap'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_cubemap.nmf')]
# ppapi_gles_book_simple_vertex_shader_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_vertex_shader'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_vertex_shader.nmf')]
# ppapi_gles_book_stencil_test_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_stencil_test'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_stencil_test.nmf')]
# ppapi_gles_book_texture_wrap_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_texture_wrap'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_texture_wrap.nmf')]


# surfaway.py
node = SimplePyAutoTester(
    env,
    'pyauto_surfaway.out',
    env.File('surfaway.py'),
    core_tests,
    core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_surfaway_test',
                       is_flaky=True,
                       is_broken=env.PyAutoTesterIsBroken())

# surfaway_async.py
node = SimplePyAutoTester(
    env,
    'pyauto_surfaway_async.out',
    env.File('surfaway_async.py'),
    core_tests,
    core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_surfaway_async_test',
                       is_flaky=True,
                       is_broken=env.PyAutoTesterIsBroken() or
                                 env.PyAutoTesterSurfawayAsyncIsBroken())

# reload.py
node = SimplePyAutoTester(
    env,
    'pyauto_reload.out',
    env.File('reload.py'),
    core_tests,
    core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_reload_test',
                       is_flaky=True,
                       is_broken=env.PyAutoTesterIsBroken() or
                                 ('TRUSTED_ENV' in env and
                                  env['TRUSTED_ENV'].Bit('windows') and
                                  env.Bit('target_x86_32')))

# multiple_nexes.py
node = SimplePyAutoTester(
    env,
    'pyauto_multiple_nexes.out',
    env.File('multiple_nexes.py'),
    core_tests,
    core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_multiple_nexes_test',
                       is_flaky=True,
                       is_broken=env.PyAutoTesterIsBroken())

uma_test_files = []
uma_test_nmfs = []

# Base files
uma_test_files.extend([
    env.File('${STAGING_DIR}/nacltest.js'),
    env.File('${STAGING_DIR}/ppapi_progress_events.js')])
# Validator failure
uma_test_files.extend([
    env.File('${STAGING_DIR}/ppapi_bad_native.html'),
    env.File('${STAGING_DIR}/partly_invalid${PROGSUFFIX}'),
    # NOTE: partly_invalid.nmf is not autogenerated yet because the nexe name
    # has a different naming scheme.
    env.File('${STAGING_DIR}/partly_invalid.nmf')])
# Crash
uma_test_files.append(env.File('${STAGING_DIR}/ppapi_crash.html'))
for test_name in ['ppapi_crash_ppapi_off_main_thread',
                  'ppapi_crash_off_main_thread',
                  'ppapi_crash_via_check_failure',
                  'ppapi_crash_via_exit_call',
                  'ppapi_crash_in_callback']:
  uma_test_files.append('${STAGING_DIR}/%s${PROGSUFFIX}' %
                        env.ProgramNameForNmf(test_name))
  uma_test_nmfs.append(test_name)

uma_test_files.extend([env.File('${STAGING_DIR}/%s${PROGSUFFIX}' %
                                env.ProgramNameForNmf('ppapi_ppb_core')),
                       env.File('${STAGING_DIR}/ppapi_ppb_core.html')])
uma_test_nmfs.append('ppapi_ppb_core')

# nacl_uma.py
node = env.PyAutoTester(
    'nacl_uma.out',
    env.File('nacl_uma.py'),
    files=uma_test_files,
    nmf_names=uma_test_nmfs,
    extra_chrome_flags=['--enable-pepper-testing'])
# Can't test validation errors (partly_broken) in PNaCl.
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_nacl_uma_test',
                       is_broken=env.PyAutoTesterIsBroken() or
                                 env.Bit('bitcode'))
