description: fix gcc warnings about enum comparisons
author: Michael Gilbert <mgilbert@debian.org>

--- a/chrome/browser/ui/views/passwords/password_generation_popup_view_views.cc
+++ b/chrome/browser/ui/views/passwords/password_generation_popup_view_views.cc
@@ -52,11 +52,11 @@ class PasswordGenerationPopupViewViews::
     BuildColumnSet(layout);
     layout->StartRow(views::GridLayout::kFixedSize, 0);
 
+    int text_style = STYLE_SECONDARY;
+    if (state == PasswordGenerationPopupController::kOfferGeneration)
+      text_style = views::style::STYLE_PRIMARY;
     layout->AddView(autofill::CreateLabelWithColorReadabilityDisabled(
-        suggestion, ChromeTextContext::CONTEXT_BODY_TEXT_LARGE,
-        state == PasswordGenerationPopupController::kOfferGeneration
-            ? views::style::STYLE_PRIMARY
-            : STYLE_SECONDARY));
+        suggestion, ChromeTextContext::CONTEXT_BODY_TEXT_LARGE, text_style));
 
     DCHECK(!password_label_);
     password_label_ = autofill::CreateLabelWithColorReadabilityDisabled(
--- a/ui/aura/hit_test_data_provider_aura.cc
+++ b/ui/aura/hit_test_data_provider_aura.cc
@@ -50,11 +50,10 @@ base::Optional<viz::HitTestRegionList> H
     return base::nullopt;
 
   base::Optional<viz::HitTestRegionList> hit_test_region_list(base::in_place);
-  hit_test_region_list->flags =
-      event_targeting_policy ==
-              ws::mojom::EventTargetingPolicy::DESCENDANTS_ONLY
-          ? viz::HitTestRegionFlags::kHitTestIgnore
-          : viz::HitTestRegionFlags::kHitTestMine;
+  hit_test_region_list->flags = viz::HitTestRegionFlags::kHitTestMine;
+  if (event_targeting_policy ==
+              ws::mojom::EventTargetingPolicy::DESCENDANTS_ONLY)
+    hit_test_region_list->flags = viz::HitTestRegionFlags::kHitTestIgnore;
   // TODO(crbug.com/805416): Use pixels instead of DIP units for bounds.
   hit_test_region_list->bounds = window_->bounds();
 
--- a/components/viz/common/gl_helper.cc
+++ b/components/viz/common/gl_helper.cc
@@ -476,7 +476,7 @@ void GLHelper::CopyTextureToImpl::Cancel
 }
 
 bool GLHelper::CopyTextureToImpl::IsBGRAReadbackSupported() {
-  if (bgra_support_ == BGRA_PREFERENCE_UNKNOWN) {
+  if (bgra_support_ == BGRA_SUPPORT_UNKNOWN) {
     bgra_support_ = BGRA_NOT_SUPPORTED;
     if (auto* extensions = gl_->GetString(GL_EXTENSIONS)) {
       const std::string extensions_string =
